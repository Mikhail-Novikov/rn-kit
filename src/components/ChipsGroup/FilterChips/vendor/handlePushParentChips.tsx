import { getCountSelectedChips } from "./getCountSelectedChips";

interface Props {
  itemChip: any,
  chipsData: any,
  setIsOpenPuller: Function,
}

export const handlePushParentChips = (props: Props): void => {
  const { chipsData, itemChip, setIsOpenPuller } = props;

  Object.assign(itemChip, {
    action: 'active',
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞ Inner
  // eslint-disable-next-line no-prototype-builtins
  const isKeyInner = itemChip.hasOwnProperty('inner');

  // –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —á–∏–ø—Å–æ–≤ –∏ –∑–∞–ø–∏—Å–∏ –≤ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É
  const arr: any[] = [];
  if (isKeyInner) {
    itemChip.inner.map((el: any) => {
      arr.push(el);
      Object.assign(chipsData, { inner: arr }); // –∫–ª–æ–Ω–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏ –≤—Å—Ç–∞–≤–∫–∞
      const count = getCountSelectedChips(arr); // –∫–æ–ª-–≤–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
      if (count !== 0) Object.assign(itemChip, { count}); // –≤—Å—Ç–∞–≤–∫–∞ –∫–æ–ª-–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    });
  }

  const countChipsSelected = (
    arr?.filter((el: { action: string }) => el.action === 'selected')
    .map((acc: [], i: number) => i)
  )?.length;

  // –°–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ì–ª–∞–≤–Ω–æ–≥–æ —á–∏–ø—Å–∞

  Object.assign(itemChip, {
    label: `Select ${countChipsSelected} choice`,
    count: countChipsSelected
  });
  console.log("üöÄ ~ file: FilterChipsItem.tsx ~ line 49 ~ handleActiveParentChips ~ countChipsSelected", countChipsSelected)

  setIsOpenPuller(true);
};
